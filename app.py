import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
from tensorflow.keras.applications.efficientnet import preprocess_input
import requests

# Funci√≥n para descargar archivo desde Google Drive
def download_file_from_google_drive(file_id, destination):
    URL = "https://drive.google.com/uc?export=download"
    session = requests.Session()
    response = session.get(URL, params={'id': file_id}, stream=True)
    token = None
    for key, value in response.cookies.items():
        if key.startswith('GD') or key.startswith('GAPS'):
            token = value
            break
    if token:
        response = session.get(URL, params={'id': file_id, 'confirm': token}, stream=True)
    else:
        response = session.get(URL, params={'id': file_id}, stream=True)
    with open(destination, "wb") as f:
        for chunk in response.iter_content(chunk_size=32768): 
            if chunk:
                f.write(chunk)

# ID del modelo y del logo en Google Drive
model_file_id = '1FkwEZ3XZ466e9LWcY51Ibl5_9vBtSadI' 
logo_file_id = '1cDozrnUSUxaSIwpd5q65qAMzna31GMzG'  

# Nombres de archivos a guardar
model_destination = "model_fin_EN0_6931.h5"
logo_destination = "PixelDerm_logo.png"

# Descargar el modelo
download_file_from_google_drive(model_file_id, model_destination)
# Descargar el logo
download_file_from_google_drive(logo_file_id, logo_destination)

# Cargar el modelo de clasificaci√≥n binaria
model_binary = load_model(model_destination)

# Funciones para procesar im√°genes y realizar predicciones
def preprocess_image(img, target_size):
    img = img.resize(target_size)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    return img_array

def predict_image_binary(img):
    processed_image = preprocess_image(img, (256, 256))
    prediction = model_binary.predict(processed_image)
    return prediction

# Funci√≥n principal para la aplicaci√≥n
def main():
    st.title("Clasificador de Lesiones Cut√°neas: Benignas - Malignas üßê")

    # Barra lateral para la navegaci√≥n
    st.sidebar.image(logo_destination)
    menu = st.sidebar.radio("Ir a", ["Home", "Detecci√≥n Lunar - Benigno Maligno"])

    if menu == "Home":
        show_home()
    elif menu == "Detecci√≥n Lunar - Benigno Maligno":
        show_detection_benigno_maligno()

# P√°gina principal (Home)
def show_home():
    st.write(
        """
       ### üåü Bienvenido a la Aplicaci√≥n de Clasificaci√≥n de Lesiones Cut√°neas Benignas - Malignas. üåü

       Desarrollada como parte de un trabajo de fin de m√°ster, esta aplicaci√≥n utiliza un modelo entrenado con **10,599 im√°genes dermatosc√≥picas** üñºÔ∏è, recopiladas de la **ISIC** (International Skin Imaging Collaboration).

       Este modelo se desarroll√≥ con t√©cnicas avanzadas de **Deep Learning** üß† para ayudar a identificar si una lesi√≥n cut√°nea es **benigna** o **maligna** üîé. Sin embargo, es importante aclarar que **los resultados de esta aplicaci√≥n no constituyen un diagn√≥stico m√©dico**. Este sistema utiliza **aprendizaje autom√°tico** para generar aproximaciones y predicciones probabil√≠sticas, pero no debe sustituir la evaluaci√≥n de un profesional de la salud üë©‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏è.

       ### Clasificaci√≥n de Lesiones Cut√°neasüîé

       La reclasificaci√≥n de los datos para el entrenamiento del modelo se realizaron de la siguiente manera:

       **Maligno:**
          - AKIEC (Queratinosis Act√≠nica)
          - BCC (Carcinoma de C√©lulas Basales)
          - MEL (Melanoma)
          - VASC (Lesiones Vasculares)

       **Benigno:**
          - BKL (Queratosis Benigna)
          - DF (Dermatofibroma)
          - NV (Nevus Melanoc√≠tico)

       **Nota üìå:** Las lesiones vasculares (VASC) se clasificaron como malignas, aunque se sabe que algunas pueden ser benignas. Esta clasificaci√≥n se realiza con el fin de disminuir los casos de falsos negativos (aquellos que el modelo clasifica como benignos pero que son malignos).

       ‚ú® Esperamos que esta herramienta te sea de gran utilidad y contribuya a una mejor comprensi√≥n de las lesiones cut√°neas. ¬°Gracias por visitarnos! üåà
        """
    )

# P√°gina de Detecci√≥n Lunar - Benigno/Maligno
def show_detection_benigno_maligno():
    st.header("Detecci√≥n Lunar - Benigno o Maligno üî¨")
    st.write(
        """
        **¬øC√≥mo usar el aplicativo? ü§î**
        
        Para evaluar una fotograf√≠a de una mancha cut√°nea, haz clic en el recuadro de abajo üì∏, selecciona la imagen que deseas revisar y deja que el modelo te proporcione la predicci√≥n. Recibir√°s como resultado la probabilidad de que la imagen sea maligna üß™ y, en otra l√≠nea, la predicci√≥n final del modelo üí°.

        **¬øC√≥mo funciona el modelo? üîç**
        
        Ten en cuenta que la probabilidad total es del 100% ‚úÖ. Por ejemplo, si la probabilidad de que una imagen sea maligna es del 51% ‚ö†Ô∏è, eso significa que la probabilidad de que sea benigna es del 49% üëç. En este caso, el modelo determinar√° que la lesi√≥n cut√°nea es maligna. El modelo fue entrenado con un criterio de elecci√≥n del 50%; por lo tanto, si la probabilidad de ser maligna es inferior al 50% üåø, se categorizar√° la imagen como benigna. Si es superior a este porcentaje, se clasificar√° como maligna üö´.
        
        **Notas üìå:**
          - Para mejorar la precisi√≥n del modelo, intenta que la mancha de piel est√© centrada üéØ y ocupe la mayor parte de la imagen üñºÔ∏è. No te preocupes si, al hacerlo, la calidad de la imagen se reduce üìâ.
          - De igual manera, puedes probar subir fotos desde distintos √°ngulos üì∏ o posiciones de la zona afectada de tu piel para validar el resultado üîÑ.
          - Recuerda que estos resultados son probabil√≠sticos üî¢ y tienen un margen de error ‚ö†Ô∏è, y no reemplazan el diagn√≥stico final que pueda emitir un profesional de la salud üë©‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏è.
        """)

    # Subida de la imagen
    uploaded_image = st.file_uploader("Sube una imagen para la detecci√≥n", type=["jpg", "png"])
    if uploaded_image is not None:
        img = Image.open(uploaded_image)
        st.image(img, caption="Imagen cargada", use_column_width=True)

        # Realizar la predicci√≥n
        prediction = predict_image_binary(img)
        st.write(f"Predicci√≥n: {prediction[0][0] * 100:.2f}% de probabilidad de ser maligno")

        # Mostrar el resultado en formato benigno/maligno
        if prediction[0][0] >= 0.5:
            st.write("El modelo predice que la lesi√≥n es **Maligna**.")
        else:
            st.write("El modelo predice que la lesi√≥n es **Benigna**.")

# Ejecutar la aplicaci√≥n
if __name__ == "__main__":
    main()


